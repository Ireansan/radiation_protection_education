/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useEffect } from "react";
import { useGLTF, useMatcapTexture, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useThree, useFrame } from "@react-three/fiber";

import { getState, useStore } from "../store";
import { getWorldPosition, getWorldDirection, lookAtSlerp } from "./utils";

type GLTFResult = GLTF & {
    nodes: {
        Alpha_Joints: THREE.SkinnedMesh;
        Alpha_Surface: THREE.SkinnedMesh;
        mixamorigHips: THREE.Bone;
    };
    materials: {
        Alpha_Joints_MAT: THREE.MeshStandardMaterial;
        Alpha_Body_MAT: THREE.MeshStandardMaterial;
    };
};

/**
 * TODO:
 * When introducing animations from mixamo,
 * please integrate the animations into one model
 * and remove the rotation elements for hips and head.
 * @link https://qiita.com/nemutas/items/a2265fae7e9dea82553b
 */
type ActionName =
    | "Idle"
    | "JumpDown"
    | "JumpUp"
    | "LeftStrafeWalking"
    | "RightStrafeWalking"
    | "StandardWalk"
    | "TPose"
    | "WalkingBackward";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

/**
 * Animation KeyConfig
 */
interface Actions {
    [key: string]: THREE.AnimationAction | null;
}

import { applyBasePath } from "../../utils";
const modelURL = applyBasePath(`/models/glb/ybot.glb`);
/**
 *
 * @param props
 * @returns
 */
export function Ybot_with_Animation(props: JSX.IntrinsicElements["group"]) {
    const [editor, debug, playerConfig] = useStore((state) => [
        state.editor,
        state.debug,
        state.playerConfig,
    ]);
    const { cameraDistance, bodyMatcap, jointMatcap, animationState } =
        playerConfig;

    const { camera } = useThree();

    const group = useRef<THREE.Group>(new THREE.Group());
    const { nodes, materials, animations } = useGLTF(
        modelURL
    ) as unknown as GLTFResult;

    const [BodyMatcap] = useMatcapTexture(bodyMatcap, 512);
    const [JointMatcap] = useMatcapTexture(jointMatcap, 512);

    const { actions } = useAnimations(animations, group);

    /**
     * Values
     */
    let t: number;
    const boneRoot = nodes.Alpha_Joints.skeleton.bones[0];
    const boneHead = nodes.Alpha_Joints.skeleton.bones[4];

    /**
     * Animation Contorller
     */
    useAnimationKeys(actions, animationKeyConfig);

    useEffect(() => {
        if (debug) {
            console.log(animationState);
        }
    }, [actions, animationState]);

    /**
     * Update
     */
    useFrame((state, delta) => {
        const controls = getState().controls;
        const { forward, backward, left, right, jump } = controls;

        /**
         * Update Head & Root Direction
         */
        if (!editor) {
            // directions
            const cameraDirection = getWorldDirection(camera);
            const bodyXYDirection = getWorldDirection(boneRoot, true);
            const headXYDirection = getWorldDirection(boneHead, true);

            // body
            const bodyWorldPosition = getWorldPosition(boneRoot);
            const bodyLookAtTarget = new THREE.Vector3().copy(bodyXYDirection);
            bodyLookAtTarget.copy(cameraDirection);

            if (forward || backward || left || right || jump) {
                // case: key press
                t = 1;
            } else if (
                Math.abs(bodyXYDirection.angleTo(headXYDirection)) >=
                Math.PI / 3
            ) {
                // case: over PI / 3
                t = 0.01;
            } else {
                // case:
                bodyLookAtTarget.copy(headXYDirection);
                t = 0.01;
            }
            bodyLookAtTarget.y = 0;
            lookAtSlerp(
                boneRoot,
                bodyXYDirection.add(bodyWorldPosition),
                bodyLookAtTarget.add(bodyWorldPosition),
                t
            );

            // head
            const headDirection = getWorldDirection(boneHead);
            const headWorldPosition = getWorldPosition(boneHead);
            const headLookAtTarget = cameraDirection.clone();
            headLookAtTarget.setLength(cameraDistance + 1);
            lookAtSlerp(
                boneHead,
                headDirection.add(headWorldPosition),
                headLookAtTarget.add(camera.position),
                0.5
            );
        }
    });

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group
                    name="Armature"
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                >
                    <primitive object={nodes.mixamorigHips} />
                    <skinnedMesh
                        name="Alpha_Joints"
                        geometry={nodes.Alpha_Joints.geometry}
                        material={materials.Alpha_Joints_MAT}
                        skeleton={nodes.Alpha_Joints.skeleton}
                    >
                        <meshMatcapMaterial
                            attach="material"
                            matcap={JointMatcap}
                        />
                    </skinnedMesh>
                    <skinnedMesh
                        name="Alpha_Surface"
                        geometry={nodes.Alpha_Surface.geometry}
                        material={materials.Alpha_Body_MAT}
                        skeleton={nodes.Alpha_Surface.skeleton}
                    >
                        <meshMatcapMaterial
                            attach="material"
                            matcap={BodyMatcap}
                        />
                    </skinnedMesh>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload(modelURL);
