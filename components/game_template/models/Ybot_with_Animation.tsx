/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useThree, useFrame } from "@react-three/fiber";

import { getState, useStore } from "../store";

type GLTFResult = GLTF & {
    nodes: {
        Alpha_Joints: THREE.SkinnedMesh;
        Alpha_Surface: THREE.SkinnedMesh;
        mixamorigHips: THREE.Bone;
    };
    materials: {
        Alpha_Joints_MAT: THREE.MeshStandardMaterial;
        ["Alpha_Body_MAT.002"]: THREE.MeshStandardMaterial;
    };
};

/**
 * TODO:
 * When introducing animations from mixamo,
 * please integrate the animations into one model
 * and remove the rotation elements for hips and head.
 * @link https://qiita.com/nemutas/items/a2265fae7e9dea82553b
 */
type ActionName = "idle" | "jump" | "tpose" | "walking";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

import { applyBasePath } from "../../utils";
const modelURL = applyBasePath(`/models/glb/ybot.glb`);

/**
 * Animation KeyConfig
 */
interface Actions {
    [key: string]: THREE.AnimationAction | null;
}
interface KeyMap {
    animation: string;
}
interface KeyConfig extends KeyMap {
    keys?: string[];
}
const animationKeyConfig = [
    {
        keys: ["ArrowUp", "w", "W", "z", "Z"],
        animation: "walking",
    },
    {
        keys: ["ArrowDown", "s", "S"],
        animation: "walking",
    },
    {
        keys: ["ArrowLeft", "a", "A", "q", "Q"],
        animation: "walking",
    },
    {
        keys: ["ArrowRight", "d", "D"],
        animation: "walking",
    },
    {
        keys: [" "],
        animation: "jump",
    },
    {
        keys: ["Shift"],
        animation: "walking",
    },
];
function useAnimationKeys(actions: Actions, keyConfig: KeyConfig[]) {
    useEffect(() => {
        const keyMap = keyConfig.reduce<{ [key: string]: KeyMap }>(
            (out, { keys, animation }) => {
                keys && keys.forEach((key) => (out[key] = { animation }));
                return out;
            },
            {}
        );

        const downHandler = ({ key, target }: KeyboardEvent) => {
            if (!keyMap[key] || (target as HTMLElement).nodeName === "INPUT")
                return;
            const { animation } = keyMap[key];
            actions[animation]?.play();
        };

        const upHandler = ({ key, target }: KeyboardEvent) => {
            if (!keyMap[key] || (target as HTMLElement).nodeName === "INPUT")
                return;
            const { animation } = keyMap[key];
            actions[animation]?.stop();
        };

        window.addEventListener("keydown", downHandler, { passive: true });
        window.addEventListener("keyup", upHandler, { passive: true });

        return () => {
            window.removeEventListener("keydown", downHandler);
            window.removeEventListener("keyup", upHandler);
        };
    }, [keyConfig]);
}

/**
 *
 * @param props
 * @returns
 */
export function Ybot_with_Animation(props: JSX.IntrinsicElements["group"]) {
    const [editor, playerConfig] = useStore((state) => [
        state.editor,
        state.playerConfig,
    ]);
    const { cameraDistance } = playerConfig;

    const { camera } = useThree();

    const group = useRef<THREE.Group>(new THREE.Group());
    const { nodes, materials, animations } = useGLTF(
        modelURL
    ) as unknown as GLTFResult;
    const { actions } = useAnimations(animations, group);

    let t: number;
    const boneRoot = nodes.Alpha_Joints.skeleton.bones[0];
    const boneHead = nodes.Alpha_Joints.skeleton.bones[4];

    /**
     *  Utils funciton
     */
    /**
     *
     * @param object
     * @returns
     */
    const objectGetWorldPosition = (object: THREE.Object3D): THREE.Vector3 => {
        const tmpWorldPosition = new THREE.Vector3();
        object.getWorldPosition(tmpWorldPosition);

        return tmpWorldPosition.clone();
    };

    /**
     *
     * @param object
     * @param xy
     * @returns
     */
    const objectGetWorldDirection = (
        object: THREE.Object3D,
        xy: boolean = false
    ): THREE.Vector3 => {
        const tmpWorldDirection = new THREE.Vector3();
        object.getWorldDirection(tmpWorldDirection);

        if (xy) {
            tmpWorldDirection.y = 0;
        }

        return tmpWorldDirection.clone();
    };

    /**
     *
     * @param object
     * @param startVector
     * @param endVector
     * @param t
     */
    const lookAtSlerp = (
        object: THREE.Object3D,
        startVector: THREE.Vector3,
        endVector: THREE.Vector3,
        t: number = 0.01
    ) => {
        object.lookAt(endVector);
        const endQuaternion = new THREE.Quaternion().copy(object.quaternion);

        object.lookAt(startVector);
        const startQuaternion = new THREE.Quaternion().copy(object.quaternion);

        object.quaternion.slerpQuaternions(startQuaternion, endQuaternion, t);
    };

    /**
     * Animation Contorller
     */
    useAnimationKeys(actions, animationKeyConfig);

    useEffect(() => {
        console.log(actions);
        // actions["idle"]?.play();
    }, [actions]);

    /**
     * Update
     */
    useFrame((state, delta) => {
        const controls = getState().controls;
        const { forward, backward, left, right, jump } = controls;

        /**
         * Update Head & Root Direction
         */
        if (!editor) {
            // directions
            const cameraDirection = objectGetWorldDirection(camera);
            const bodyXYDirection = objectGetWorldDirection(boneRoot, true);
            const headXYDirection = objectGetWorldDirection(boneHead, true);

            // body
            const bodyWorldPosition = objectGetWorldPosition(boneRoot);
            const bodyLookAtTarget = new THREE.Vector3().copy(bodyXYDirection);
            bodyLookAtTarget.copy(cameraDirection);

            if (forward || backward || left || right || jump) {
                // case: key press
                t = 1;
            } else if (
                Math.abs(bodyXYDirection.angleTo(headXYDirection)) >=
                Math.PI / 3
            ) {
                // case: over PI / 3
                t = 0.01;
            } else {
                // case:
                bodyLookAtTarget.copy(headXYDirection);
                t = 0.01;
            }
            bodyLookAtTarget.y = 0;
            lookAtSlerp(
                boneRoot,
                bodyXYDirection.add(bodyWorldPosition),
                bodyLookAtTarget.add(bodyWorldPosition),
                t
            );

            // head
            const headDirection = objectGetWorldDirection(boneHead);
            const headWorldPosition = objectGetWorldPosition(boneHead);
            const headLookAtTarget = cameraDirection.clone();
            headLookAtTarget.setLength(cameraDistance + 1);
            lookAtSlerp(
                boneHead,
                headDirection.add(headWorldPosition),
                headLookAtTarget.add(camera.position),
                0.5
            );
        }
    });

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group
                    name="Armature"
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                >
                    <primitive object={nodes.mixamorigHips} />
                    <skinnedMesh
                        name="Alpha_Joints"
                        geometry={nodes.Alpha_Joints.geometry}
                        material={materials.Alpha_Joints_MAT}
                        skeleton={nodes.Alpha_Joints.skeleton}
                    />
                    <skinnedMesh
                        name="Alpha_Surface"
                        geometry={nodes.Alpha_Surface.geometry}
                        material={materials["Alpha_Body_MAT.002"]}
                        skeleton={nodes.Alpha_Surface.skeleton}
                    />
                </group>
            </group>
        </group>
    );
}

useGLTF.preload(modelURL);
