/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
    nodes: {
        Alpha_Joints: THREE.SkinnedMesh;
        Alpha_Surface: THREE.SkinnedMesh;
        mixamorigHips: THREE.Bone;
    };
    materials: {
        Alpha_Joints_MAT: THREE.MeshStandardMaterial;
        ["Alpha_Body_MAT.002"]: THREE.MeshStandardMaterial;
    };
};

type ActionName = "idle" | "jump" | "tpose" | "walking";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

const modelPath = "/models/glb/ybot.glb";

export function Ybot(props: JSX.IntrinsicElements["group"]) {
    const group = useRef<THREE.Group>();
    const { nodes, materials, animations } = useGLTF(
        modelPath
    ) as unknown as GLTFResult;
    const { actions } = useAnimations(animations, group);
    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group
                    name="Armature"
                    rotation={[Math.PI / 2, 0, 0]}
                    scale={0.01}
                >
                    <primitive object={nodes.mixamorigHips} />
                    <skinnedMesh
                        name="Alpha_Joints"
                        geometry={nodes.Alpha_Joints.geometry}
                        material={materials.Alpha_Joints_MAT}
                        skeleton={nodes.Alpha_Joints.skeleton}
                    />
                    <skinnedMesh
                        name="Alpha_Surface"
                        geometry={nodes.Alpha_Surface.geometry}
                        material={materials["Alpha_Body_MAT.002"]}
                        skeleton={nodes.Alpha_Surface.skeleton}
                    />
                </group>
            </group>
        </group>
    );
}

useGLTF.preload(modelPath);
