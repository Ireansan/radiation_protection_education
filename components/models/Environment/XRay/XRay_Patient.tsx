/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 x-ray_patient.glb -o XRay_Patient.tsx -t 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
    nodes: {
        patient: THREE.Mesh;
    };
    materials: {
        ["mat2.001"]: THREE.MeshStandardMaterial;
    };
};

type ContextType = Record<
    string,
    React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

import { applyBasePath } from "../../../../utils";
const modelURL = applyBasePath(`/models/glb/radiation/x-ray/x-ray_patient.glb`);

export function XRay_Patient(props: JSX.IntrinsicElements["group"]) {
    const { nodes, materials } = useGLTF(modelURL) as GLTFResult;
    return (
        <group {...props} dispose={null}>
            <mesh
                geometry={nodes.patient.geometry}
                material={materials["mat2.001"]}
            />
        </group>
    );
}

useGLTF.preload(modelURL);
