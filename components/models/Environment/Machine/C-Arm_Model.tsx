/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 ./public/models/glb/radiation/C-Arm_rough.glb -t
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF, useMatcapTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
    nodes: {
        Arm: THREE.SkinnedMesh;
        Armbase: THREE.SkinnedMesh;
        Armsub1: THREE.SkinnedMesh;
        Armsub2: THREE.SkinnedMesh;
        Body: THREE.SkinnedMesh;
        Root: THREE.Bone;
    };
    materials: {};
};

import { applyBasePath } from "../../../../utils";
const modelURL = applyBasePath(
    `/models/glb/environments/machine/C-Arm_rough.glb`
);

type cArmModelProps = {
    roll?: number;
    pitch?: number;
    height?: number;
} & JSX.IntrinsicElements["group"];
export function CArmModel({ roll, pitch, height, ...props }: cArmModelProps) {
    const { nodes, materials } = useGLTF(modelURL) as GLTFResult;

    const [ArmMatcap] = useMatcapTexture("28292A_D3DAE5_A3ACB8_818183", 512);
    const [ArmbaseMatcap] = useMatcapTexture(
        "050505_747474_4C4C4C_333333",
        512
    );
    const [Armsub1Matcap] = useMatcapTexture(
        "28292A_D3DAE5_A3ACB8_818183",
        512
    );
    const [Armsub2Matcap] = useMatcapTexture(
        "28292A_D3DAE5_A3ACB8_818183",
        512
    );
    const [BodyMatcap] = useMatcapTexture("28292A_D3DAE5_A3ACB8_818183", 512);

    useEffect(() => {
        const rollBone = nodes.Root.getObjectByName("ArmRoll");
        if (rollBone) {
            height ? (rollBone.position.y = height) : null;
            roll ? (rollBone.rotation.y = roll) : null;
        }

        const pitchBone = nodes.Root.getObjectByName("ArmPitch");
        if (pitchBone) {
            pitch ? (pitchBone.rotation.x = pitch) : null;
        }
    }, [nodes, roll, pitch, height]);

    return (
        <group {...props} dispose={null}>
            <primitive object={nodes.Root} />
            <skinnedMesh
                geometry={nodes.Arm.geometry}
                material={nodes.Arm.material}
                skeleton={nodes.Arm.skeleton}
            >
                <meshMatcapMaterial attach="material" matcap={ArmMatcap} />
            </skinnedMesh>
            <skinnedMesh
                geometry={nodes.Armbase.geometry}
                material={nodes.Armbase.material}
                skeleton={nodes.Armbase.skeleton}
            >
                <meshMatcapMaterial attach="material" matcap={ArmbaseMatcap} />
            </skinnedMesh>
            <skinnedMesh
                geometry={nodes.Armsub1.geometry}
                material={nodes.Armsub1.material}
                skeleton={nodes.Armsub1.skeleton}
            >
                <meshMatcapMaterial attach="material" matcap={Armsub1Matcap} />
            </skinnedMesh>
            <skinnedMesh
                geometry={nodes.Armsub2.geometry}
                material={nodes.Armsub2.material}
                skeleton={nodes.Armsub2.skeleton}
            >
                <meshMatcapMaterial attach="material" matcap={Armsub2Matcap} />
            </skinnedMesh>
            <skinnedMesh
                geometry={nodes.Body.geometry}
                material={nodes.Body.material}
                skeleton={nodes.Body.skeleton}
            >
                <meshMatcapMaterial attach="material" matcap={BodyMatcap} />
            </skinnedMesh>
        </group>
    );
}

useGLTF.preload(modelURL);

export function updateCArmModel(
    cArmModelRef: React.RefObject<THREE.Group>,
    position: THREE.Vector3Tuple,
    rotation: THREE.Vector3Tuple,
    roll: number,
    pitch: number,
    height: number
) {
    if (cArmModelRef.current && cArmModelRef.current.children[0]) {
        cArmModelRef.current.position.set(...position);
        cArmModelRef.current.rotation.set(...rotation);

        let element = cArmModelRef.current.children[0];

        let rollBone = element.getObjectByName("ArmRoll");
        if (rollBone) {
            height ? (rollBone.position.y = height) : null;
            rollBone.rotation.y = roll;
        }

        let pitchBone = element.getObjectByName("ArmPitch");
        if (pitchBone) {
            pitchBone.rotation.x = pitch;
        }
    }
}
